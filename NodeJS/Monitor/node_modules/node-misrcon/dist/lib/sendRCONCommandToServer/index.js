"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Name: sendRCONCommandToServer
 * Created by chris on 4/26/2017.
 * Description: contains tools to send and parse responses from the miscreated game servers RCON
 */
var axios_1 = require("axios");
var http = require("http");
var utils = require("../utils/utils");
var node_misrcon_1 = require("../node-misrcon");
// // RCON Steps
// --- 1 ---
// // Request: challenge
// // Response: uptime
// --- 2 ---
// // Request: md5(uptime:password)
// // Response: AuthResponse
// --- 3 ---
// // Request: CommandString
// // Response: RCONResult
/**
 * Sends a command via XMLRPC  to a server and returns a promise response
 * @param {number} timeout timeout after no response for this long
 * @param {Object} options   object containing  user credentials and command
 *                           {ip:[ip], port:[port], password:[password], command: [command]}
 * @returns{Promise<string>} response      returns a promise that resolves to a String
 */
function sendRCONCommandToServer(options, timeout) {
    if (timeout === void 0) { timeout = node_misrcon_1.DEFAULT_TIMEOUT; }
    return __awaiter(this, void 0, void 0, function () {
        var serverUrl, CancelToken, source, axiosConfig, axiosWithConfig, challengeString, challengResult, upTime, challengeResponseRequest, md5Response, commandString, rconResult, authResults, commandString, rconResult, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 7, , 8]);
                    serverUrl = "http://" + options.ip + ":" + options.port + "/rpc2";
                    CancelToken = axios_1.default.CancelToken;
                    source = CancelToken.source();
                    axiosConfig = {
                        cancelToken: source.token,
                        headers: { 'Content-Type': 'text/xml' },
                        httpAgent: new http.Agent({ keepAlive: true }),
                        timeout: timeout
                    };
                    axiosWithConfig = axios_1.default.create(axiosConfig);
                    challengeString = utils.createChallengeString();
                    return [4 /*yield*/, axiosWithConfig.post(serverUrl, challengeString)];
                case 1:
                    challengResult = _a.sent();
                    upTime = utils.getUpTimeFromChallengeResponse(challengResult.data);
                    challengeResponseRequest = utils.createChallengeResponseString(upTime, options.password);
                    return [4 /*yield*/, axiosWithConfig.post(serverUrl, challengeResponseRequest)];
                case 2:
                    md5Response = _a.sent();
                    if (!utils.isIllegalCommand(md5Response)) return [3 /*break*/, 4];
                    commandString = utils.createCommandString(options.command);
                    return [4 /*yield*/, axiosWithConfig.post(serverUrl, commandString)];
                case 3:
                    rconResult = _a.sent();
                    if (utils.isIllegalCommand(rconResult.data)) {
                        return [2 /*return*/, 'Illegal Command'];
                    }
                    source.cancel('Operation canceled by the user.');
                    // parse and return
                    return [2 /*return*/, utils.parseCommandResponse(rconResult.data)];
                case 4:
                    if (!Object.prototype.hasOwnProperty.call(md5Response, 'data')) return [3 /*break*/, 6];
                    authResults = utils.parseAuthResponse(md5Response.data);
                    if (authResults !== 'authorized') {
                        return [2 /*return*/, 'Incorrect Password'];
                    }
                    commandString = utils.createCommandString(options.command);
                    return [4 /*yield*/, axiosWithConfig.post(serverUrl, commandString)];
                case 5:
                    rconResult = _a.sent();
                    source.cancel('Operation canceled by the user.');
                    // parse and return
                    return [2 /*return*/, utils.parseCommandResponse(rconResult.data)];
                case 6: return [3 /*break*/, 8];
                case 7:
                    e_1 = _a.sent();
                    // console.log(e);
                    throw e_1;
                case 8: return [2 /*return*/, 'Authentication Error'];
            }
        });
    });
}
exports.default = sendRCONCommandToServer;
//# sourceMappingURL=index.js.map