export declare type SteamID = string;
export interface IPlayer {
    steam: SteamID;
    name: string;
    entID: number;
    id: number;
    ip: string;
    ping: number;
    state: number;
    profile: number;
}
export declare type PlayersArray = IPlayer[];
export interface IServerStatus {
    name: string;
    ip: string;
    time: string;
    version: string;
    level: string;
    gameRules: string;
    players: string;
    roundTimeRemaining: string;
    upTime: string;
    nextRestart: string;
    weather: string;
    weatherPattern: string;
}
export interface IPlayerStatus {
    playersArray: PlayersArray;
}
export declare type StatusResponse = IServerStatus & IPlayerStatus;
export declare type BanListResponse = SteamID[];
export declare type WhiteListResponse = SteamID[];
export declare type ParseResponse = {
    data: StatusResponse;
    type: 'status';
} | {
    data: BanListResponse;
    type: 'banlist';
} | {
    data: WhiteListResponse;
    type: 'whitelist';
} | {
    data: ISysInfoPQM;
    type: 'sysinfo pqm';
} | {
    data: ISysInfoStats;
    type: 'sysinfo stats';
} | {
    data: IEntity[];
    type: 'entity dump';
} | false;
export declare type Parsed = StatusResponse | BanListResponse | WhiteListResponse | ISysInfoPQM | ISysInfoStats | string;
export interface IAllData {
    status: StatusResponse;
    banlist: BanListResponse;
    whitelist: WhiteListResponse;
    stats: ISysInfoStats;
    pqm: ISysInfoPQM;
}
export interface ICredentials {
    ip: string;
    port: number;
    password: string;
}
export interface ICommandObject extends ICredentials {
    command: string;
}
export interface ISysInfoStats {
    uptime: string;
    upd: string;
    rate: string;
    up: string;
    dn: string;
    tvm: string;
    vmu: string;
    tpm: string;
    pmu: string;
    vmup: string;
    pmup: string;
}
export interface ISysInfoPQM {
    pqm: {
        requests: {
            queueSize: string;
            avgResponse: string;
        };
        invokes: {
            queueSize: string;
            avgResponse: string;
        };
    };
    pcm: {
        queueSize: string;
    };
}
export interface IEntity {
    active: boolean;
    id: number;
    pos: [number, number, number];
    salt: number;
    type: ENTITY_ENUM;
}
export declare type ENTITY_ENUM = 'tractor' | 'quadbike';
