"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Name: parseSysInfoPQM
 * Description:
 */
var node_misrcon_1 = require("../node-misrcon");
var utils_1 = require("../utils/utils");
var defaultSysInfoPQM = {
    pcm: {
        queueSize: ''
    },
    pqm: {
        invokes: {
            avgResponse: '',
            queueSize: ''
        },
        requests: {
            avgResponse: '',
            queueSize: ''
        }
    }
};
var splitToKeys = function (val) {
    return val.reduce(function (acc, curVal) {
        var _a;
        var splitVal = curVal.split(':');
        return __assign(__assign({}, acc), (_a = {}, _a[utils_1.camelCase(splitVal[0].trim())] = splitVal[1].trim(), _a));
    }, defaultSysInfoPQM);
};
exports.default = (function (response) {
    var _a;
    if (!response.includes('PQM: Requests -')) {
        throw new node_misrcon_1.ParserError('Not a SysInfo PQM response');
    }
    try {
        var _b = response
            .replace("[CONSOLE] Executing console command 'sysinfo pqm'", '')
            .split('PCM:'), pqm = _b[0], pcm = _b[1];
        var _c = pqm.split(';').map(function (item) {
            return item
                .replace('PQM: Requests - ', '')
                .replace(' Invokes - ', '')
                .split(',')
                .filter(function (i) { return i.trim().length !== 0; });
        }), pqmRequests = _c[0], pqmInvokes = _c[1];
        var value = __assign(__assign({}, defaultSysInfoPQM), { 
            // @ts-ignore
            pcm: (_a = {},
                _a[utils_1.camelCase(pcm.split(':')[0])] = pcm.split(':')[1].trim(),
                _a), pqm: {
                // @ts-ignore
                invokes: __assign({}, splitToKeys(pqmInvokes)),
                // @ts-ignore
                requests: __assign({}, splitToKeys(pqmRequests))
            } });
        return value;
    }
    catch (e) {
        throw new node_misrcon_1.ParserError('Not a SysInfo PQM response');
    }
});
//# sourceMappingURL=parseSysInfoPQM.js.map