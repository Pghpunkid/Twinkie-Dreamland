"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Name: parseStatusResponseToJs
 * Created by chris on 4/27/2017.
 * Description:
 */
var node_misrcon_1 = require("../node-misrcon");
/**
 * Parses the response from the rcon command status
 * @param {string} statusString   string with the server response
 * @returns {Object} An object containing the server status and a
 * playersArray containing player objects
 */
function parseStatusResponseToJs(statusString) {
    if (!statusString.includes('Server Status:')) {
        throw new node_misrcon_1.ParserError('Not a Status Response');
    }
    // what the obj will look like when we send it back
    var player = {
        entID: 0,
        id: 0,
        ip: '',
        name: '',
        ping: 0,
        profile: 0,
        state: 0,
        steam: ''
    };
    var retObj = {
        gameRules: '',
        ip: '',
        level: '',
        name: '',
        nextRestart: '',
        players: '',
        playersArray: [player],
        roundTimeRemaining: '',
        time: '',
        upTime: '',
        version: '',
        weather: '',
        weatherPattern: ''
    };
    var serverStatusObject = getStatusObjectFromString(statusString);
    var playersString = getPlayersString(statusString);
    var playersArray = splitPlayerStringRowsIntoArray(playersString);
    return __assign(__assign(__assign({}, retObj), serverStatusObject), { playersArray: playersArray });
}
exports.default = parseStatusResponseToJs;
function getStatusObjectFromString(str) {
    var serverStatusString = str
        .split('-----------------------------------------')[1]
        .replace('Server Status:\n', '');
    var returnValueOrNull = function (regex) { return (regex !== null ? regex[1] : ''); };
    var parseRegex = function (pattern) {
        return returnValueOrNull(new RegExp(pattern).exec(serverStatusString));
    };
    return {
        gameRules: parseRegex('gamerules: (.*)\n'),
        ip: parseRegex('ip: (.*)\n'),
        level: parseRegex('level: (.*)\n'),
        name: parseRegex('name: (.*)\n'),
        nextRestart: parseRegex('next restart in: (.*)\n'),
        players: parseRegex('players: (.*)\n'),
        roundTimeRemaining: parseRegex('round time remaining: (.*)\n'),
        time: parseRegex('time: (.*)\n'),
        upTime: parseRegex('uptime: (.*)\n'),
        version: parseRegex('version: (.*)\n'),
        weather: parseRegex('weather: (.*)\n'),
        weatherPattern: parseRegex('weatherpattern: (.*)\n')
    };
}
function getPlayersString(str) {
    var pString = /Server Status:[\s\S]*.*/g;
    var newStr = pString.exec(String(str));
    return newStr ? newStr[0].replace('Server Status:\n', '') : '';
}
function stripGarbageCharacters(regexResults) {
    if (regexResults) {
        var results = regexResults[1];
        var trimmed = results !== null ? results.trim() : '';
        return trimmed.replace(/'/g, '');
    }
    return '';
}
function splitPlayerStringRowsIntoArray(str) {
    var stringArray = str.split('\n');
    var playersArray = [];
    var steamIdRE = new RegExp('steam: (.*)  name:');
    var nameRE = new RegExp('name: (.*)  entID:');
    var entIDRE = new RegExp('entID:(.*)  id:');
    var idRE = new RegExp('id:(.*)  ip:');
    var ipRE = new RegExp('ip:(.*)  ping:');
    var pingRE = new RegExp('ping:(.*)  state:');
    var stateRE = new RegExp('state:(.*)  profile:');
    var profileRE = new RegExp('profile: (.*)');
    stringArray.forEach(function (player) {
        var steam = stripGarbageCharacters(steamIdRE.exec(player));
        var name = stripGarbageCharacters(nameRE.exec(player));
        var entID = Number(stripGarbageCharacters(entIDRE.exec(player)));
        var id = Number(stripGarbageCharacters(idRE.exec(player)));
        var ip = stripGarbageCharacters(ipRE.exec(player));
        var ping = Number(stripGarbageCharacters(pingRE.exec(player)));
        var state = Number(stripGarbageCharacters(stateRE.exec(player)));
        var profile = Number(stripGarbageCharacters(profileRE.exec(player)));
        playersArray.push({
            entID: entID,
            id: id,
            ip: ip,
            name: name,
            ping: ping,
            profile: profile,
            state: state,
            steam: steam
        });
    });
    return playersArray.filter(function (player) { return player.steam; });
}
//# sourceMappingURL=parseStatus.js.map